package com.yukicris.RabbitMQ.learnNote1;

public class Msg1 {
    /**
     * 中间件 脱离具体设计目标,具备提供普遍独立功能需求的模块
     *
     * 负载均衡: Nginx ,LVS负载均衡, KeepAlive , CDN    (Nginx,CDN重要)
     *
     * 缓存中间件: MemCache(小型项目) ,Redis(开源,高性能,大项目)
     *
     * 数据库中间件: MyCat , ShardingJdbc (高可用,分库分表)
     *
     *
     * 如何选取中间件: 1 是否支持通讯 2 是否高性能 3 是否跨平台
     */


    /**
     * 单体架构: 一个请求,一个jvm服务处理完成
     *
     * 分布式架构: 一个请求,(拆分成多个)由服务器端的多个服务(服务或系统)协同处理完成
     * 比如医院看病请求,由门诊,检查,手术等等一系列服务完成,且门诊,检查,手术等信息互相调用,类似于订单与会员机制
     */

    /**
     * RabbitMQ是spring家开发的,支持比较完善,且开源
     */

    // 消息中间件 是 1 利用可靠的消息传递机制进行系统和系统直接通讯
    //             2 通过提供消息传递和消息排队机制,可以在分布式系统环境下扩展进程间通讯

    // 其本质是一种接受数据,存储数据,发送数据等功能的技术服务

    //核心组成: 1 消息协议 2 消息持久化机制 3 消息分发策略 4 消息高可用,高可靠 5 消息的容错机制


    /**
     * 场景: 1 跨系统数据传递
     *      2 高并发的流量消峰
     *      3 数据的分发和异步处理
     *      4 大数据分析与传递
     *      5 分布式事务
     */

    /**
     * 协议
     *  语法: 语法是用户数据与控制信息的结构与格式,以及数据出现的顺序
     *  语义: 解释控制信息每个部分的意义,规定了需要发出何种控制信息以及完成的动作与做出何种响应
     *  时序: 对事件发生顺序的详细说明
     *
     *
     *  例子: http 协议
     *      语法: 请求报文和响应报文的格式
     *      语义: 客户端主动发起的请求   (get/post请求)
     *      时序: 一个请求对应一个响应 (一定先请求,再响应)
     *
     *  面试: 为什么消息中间件不使用http协议?
     *      1 因为http请求报文头和响应报文头太复杂,(cookie,解密加密,状态码响应码等)对于一个消息而言用不上,不需要这么复杂,也没有这个必要,
     *      它仅仅需要数据传递,存储,分发就可以了(高性能,简洁快速)
     *      2 http大部分是短连接,请求到响应可能会中断,不利于消息中间件的业务场景,因为消息中间件是一个长期的获取消息的过程,出现问题和故障要对数据或消息进行持久化
     *      (持久化和高可靠)
     *
     *
     *  AMQP协议(Spring)
     *  (高级消息队列协议)
     *  : 特性 : 1 分布式事务支持 2 消息持久化支持 3 高性能 高可靠的消息处理优势
     *
     *  MQTT协议: 消息队列(IBM) 是一个即时通讯协议,物联网系统架构中的重要组成部分
     *  特点: 1 轻量 2 结构简单 3 传输快,不支持事务 4 没有持久化设计
     *  用于计算能力有限,低带宽,网络不稳定的场景
     *
     *
     *  Kafka协议
     *  基于TCP/IP的二进制协议,消息内部是通过长度分割,由一些基本数据类型组成的
     *  特点: 结构简单 2 解析速度快 3 无事务支持 4 有持久化设计
     */


    /**
     * 持久化
     *    数据存入磁盘,而不是内存中随服务器断开而消失,使数据永久得到保存
     *
     * 常见持久化方式:  ActiveMQ支持文件存储和数据库持久化 ,RabbtiMQ,Kafka,RocketMQ 仅支持文件存储
     */

    /**
     * 分发机制
     *      com.yukicris.RabbitMQ:1 发布订阅 2 轮询分发(公平) 3 公平分发(也是轮询,不过能者多劳) 4 重发 5 消息拉取
     *
     */

    /**
     * 高可用和高可靠
     *      高可用: 产品在规定条件下和规定的时刻时间内处于可执行规定功能状态的能力(就是时刻保证可用,即支持集群部署以达到高可用的目的)
     *      高可靠: 通过持久化保证可靠性 通过协议保证系统间数据解析的正确性
     */

    // 集群总之三句话; 要么消息共享 要么消息同步 要么元数据共享
}
