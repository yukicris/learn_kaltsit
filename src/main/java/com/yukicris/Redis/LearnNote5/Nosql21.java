package com.yukicris.Redis.LearnNote5;

public class Nosql21 {
    // rdb (redis database)
    /**
     * redis是内存数据库,如果不将内存中的数据库状态保存到磁盘,那么一旦服务器进程退出,服务器中的数据库状态也会消失.所以redis提供了持久化的功能
     *
     *
     *
     * 在指定的时间间隔将内存中的数据集快照写入磁盘,也就是行话讲的快照(Snapshot),他恢复时是将快照文件直接读到内存里
     *
     * Redis会单独创建(fork)一个子进程来进行持久化,会先将数据写入到一个(rdb)临时文件中,等持久化过程结束(快照写入完成,替换原有的快照文件,子进程退出),用这个临时文件替换上次持久化好的文件,成为正式的rdb文件,
     * 整个过程中,主进程不进行任何io操作,确保了极高的性能,如果需要大规模数据的恢复,且对于数据恢复的完整性不是非常敏感.那么rdb方式要比aof方式更加的高效.rdb的缺点是最后一次持久化的数据有可能会丢失(宕机)
     * 一般情况下,默认都是rdb,不需要修改这个配置
     *
     * rdb保存的文件是dump.rdb
     * 在配置文件中的快照(snapshot)中进行配置
     * dbfilename dump.rdb
     *
     * 有时候会对他进行备份
     *
     * // 触发机制
     * 1 save的规则满足情况下,会自动触发rdb规则
     * 2 执行flushall 命令.也会触发rdb规则
     * 3 退出redis后,也会产生rdb文件
     * 备份就自动生成dump.rdb
     *
     * 如何恢复rdb文件
     * 1 只需要将rdb文件放在我们redis启动目录即可,redis启动的时候会自动检查dump.rdb恢复其中的数据
     * 2 查看需要存在的位置
     * >cibfig get dir
     * "usr/local/bin" 如果这个目录下存在dump.rdb文件,启动的时候就会自动恢复其中的数据
     *
     * 几乎他默认的配置就够用了,但是我们还是要学习
     *
     * 优点:
     *
     * 1 适合大规模的数据恢复
     * 2 对数据完整性要求不高
     *
     * 缺点: 需要一定的时间间隔进行进程操作,如果redis意外宕机了,那么最后一次修改的数据就没有了
     * 2 fork进程的时候会占用一定的内存空间
     */
}
