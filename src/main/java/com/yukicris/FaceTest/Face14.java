package com.yukicris.FaceTest;

public class Face14 {
    // vsSoft 寄
    //一个赛一个的蛇皮
    // spring 监听器和拦截器,过滤器的区别

    //线程池未完成服务炸了怎么处理
    //如果队列里的任务请求只存在于内存，没有持久化的话，服务宕机队列中的请求肯定会宕机。可以在提交到线程池前，先把任务信息插到数据库，
    //状态为未提交，提交到线程池之后改为已提交，任务完成之后改为已完成。服务器宕机后通过后台线程把未提交和已提交的任务重新加入到线程池中。

   /* （1）shutdown方法是关闭线程池；

    （2）但是，shutdown只是初始化整个关闭过程, 执行完这个方法后，线程池不一定会立即停止；

    所以，在我们调用了shutdown方法后，线程池就知道了 停止线程池的意图；而并不是我们调用shutdown方法后，整个线程池就能停的。比如，线程池在执行到一半时，线程中有正在执行的任务，队列中也可能有等待被执行的任务，线程池需要等这些任务执行完了，才能真正停止。

    当然，在我们调用了shutdown方法后，如果还有新的任务过来，线程池就会拒绝。

    演示案例，在尼恩的《Java 高并发核心编程 卷2 加强版》随时源码中，有大量的 shutdown 使用案例
————————————————
    版权声明：本文为CSDN博主「40岁资深老架构师尼恩」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
    原文链接：https://blog.csdn.net/crazymakercircle/article/details/129462571*/


    //String Stringbuffer 内存中的位置等等

    //int4位float也是4位 但是float存储容量是int的几倍,区别

    //索引 or 和like (这个分不该丢)

    //mybatis #和$   $符号的应用场景是什么 扯到枚举上面去了

    //aop倒是没有细问

    //vue双向绑定的原理

    //css 绝对路径  position

}
