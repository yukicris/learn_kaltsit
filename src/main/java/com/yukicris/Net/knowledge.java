package com.yukicris.Net;

public class knowledge {
    /**
     * TCP 打电话 - 链接- 接了 -通话
     * UDP 发短信 -发送了就完事 - 接受
     *
     * 网络编程的目的:
     * 传播信息,数据交换,通信
     *
     * 1 如何准确定位网络上的一台主机  ip:端口
     * 2 找到这个主机,如何传输数据
     *
     *
     * javaweb : 网页编程   B/S
      * 网络编程: TCP/IP    C/S
     */


    /**
     * 网络通信的要素
     * 1 如何实现网络通信: 通信双方的地址: ip 端口号
     * 2 网络通信协议
     *
     */

    /**
     * IP
     * ip InetAddress
     * 127.0.0.1: localhost
     * ip地址分类: IPV4/IPV6
     *    ipv4      127.0.0.1 4个字节组成 每个字符0-255,总共42亿,30亿在北美,亚洲4亿,2011年就没了
     *    ipv6      fe80::915d: xxxx   128位,8个无符号整数表示的
     *
     *
     * 公网(互联网) - 私网 (局域网)
     *      ABCD类地址
     *      192.168.xx.xx 专门给组织内部使用的,局域网
     *
     */


    /**
     * 端口
     * 端口表示计算机上的程序的进程
     * 不同的进程有不同的端口号,用来区分软件的
     * 一般被规定  0-65535
     * TCP,UDP  :这两个不冲突 所以一共允许是 65535*2个,单个协议下,端口号不能冲突
     * 端口分类:
     *      公有端口0-1023
     *      HTTP:80
     *      HTTPS: 443
     *      FTP:21
     *      Telent: 23
     *
     * 程序注册端口: 1024-49151,分配用户或者程序
     *         Tomcat: 8080
     *         Mysql: 3306
     *         Oracle: 1521
     *         Redis 6379
     *
     *  动态,私有 49152-65535(尽量别用)
     *  netstat -ano 查看所有端口
     *  netstat -ano|findstr "8080"  查看指定端口
     *  tasklist|findstr "8696"  查看指定端口的进程
     *
     *  任务管理器    ctrl+shift+esc */


    /**
     * 通信协议
     * 协议: 约定,就好比普通话
     * 网络通信协议: 速率,传输码率,代码结构,传输控制
     * TCP/IP协议簇
     *  TCP用户传输协议
     *  UDP用户数据报协议
     *
     *  出名的协议
     *  TCP
     *  IP:网络互联协议
     *   四层概念模型 应用层(HTTP,FTP,TFTP,SMTP等 ,类似qq) 传输层 (TCP,UDP,通信协议)
     *   网络层(IP,ICMP,ARP, 一般用来封包)  数据链路层(FDDI,IEEE802.1A到802.11 网线/宽带等)
     *
     *  TCP UDP对比
     *  TCP: 打电话
     *      连接,稳定,三次握手(你瞅啥 瞅你咋地 打起来),四次挥手(a我要断开了, b我知道你要断开了, b我准备好了你可以关闭了 a 我关闭了)
     *      客户端-服务端
     *  UDP: 发短信
     *      不连接,不稳定,客户端服务端没有明确界限
     *      不管有没有准备好,都可以发给你
     *
     *
     *
     *
     */


    /**
     * TCP实现聊天
     *
     * 客户端:1  链接服务器Socket
     *       2  发送消息
     *
     * 服务器
     *      1 建立服务的端口serverSocket
     *      2 等待用户的链接
     *      3 接受用的消息
     */


    /**
     * UDP
     * 不用连接,但是需要知道对方的地址
     * 关键字 send /receive
     *
     * 咨询网站
     * 互为服务器,就可以实现一些聊天功能
     *
     * 如果要实现2方都是发送方,也都是接受方,需要用到多线程
     */


    /**
     * URL 统一资源定位符
     * www.baidu.com
     * 统一资源定位符 : 定位互联网上的某一个资源
     * DNS 域名解析
     * https 443   http 80
     * 协议://IP地址端口号/项目名/资源
     */
}
