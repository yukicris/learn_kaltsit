package com.yukicris.docker;

public class knowledge1 {
    // Docker是基于go语音实现的云开源项目
    //build,ship and run any app,anywhere
    /**
     * 通过对应用的组件的封装,分发,部署,运行等生命周期的管理,使用户的app以及运行环境可以做到一次镜像到处运行
     *
     * Linux容器技术的实现就解决了这个问题,doker是在它的基础上发展而来
     * 将应用打成镜像,通过镜像成为运行在docker上面的实例,而docker容器在任何操作系统上都是一致的
     * 实现了跨平台,跨服务器,只需要一次配置好环境,换到别的机器上就可以一键部署好,大大简化操作
     *
     */

    /**
     * 容器和虚拟机的比较
     * 虚拟机:vm 是带环境安装的一种解决方案
     * 可以在一套操作系统里面运行另外一种操作系统,比如win跑linux,对于底层系统,他可以随时删除掉那个虚拟机系统,他就是一个文件
     *
     * 缺点: 1 资源占用多(相当于完整系统) 2 冗余步骤多 3 启动慢
     *
     * 然后衍生出另一种,linux容器, 他是与系统其他部分分隔离开的一系列进程,从另一个镜像运行,并且由该镜像提供支持进程所需的全部文件
     * 它不是模拟一个完整的操作系统,而是堆进程进行隔离,容器与虚拟机不同,它不需要捆绑一整套操作系统,只需要该软件所需要的库和资源
     * docker是共用当前操作系统的内核,然后实现运行,它本身没有自己的内核也没有进行硬件虚拟,每个容器互相隔离,都有自己的文件系统,
     * 每个容器进程不会互相影响
     *
     */

    /**
     * 能干嘛
     *  DEVOPS 开发/运维
     * 一次构建,到处运行 : 1 更快速的应用交付部署 2 更便捷的升级和扩缩容 3 更简单的系统运维
     * 4 更高效的计算资源利用(内核级虚拟化,一台物理机可以运行多个容器实例,可以大大提升物理服务器的cpu和内存利用率)
     *
     * 应用场景 新浪,美团...
     */
}
