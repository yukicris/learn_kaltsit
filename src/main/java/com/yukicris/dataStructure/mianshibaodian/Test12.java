package com.yukicris.dataStructure.mianshibaodian;

public class Test12 {
    //编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。
    //提示：
    //
    //请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
    //在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
    // 
    //
    //示例 1：
    //
    //输入：n = 11 (控制台输入 00000000000000000000000000001011)
    //输出：3
    //解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。\\


    // 这个题主要有位运算的知识点
    // n&1   与运算      可以判断n是否为偶数(11得1,其他都是0)     如果是偶数，n&1返回0；否则返回1，为奇数。   1001与0001,同位相与结果0001,为奇数
    // n|1   或运算      (00得0,其他都是1)

    //都是基于二进制下的
    // <<    左移        1<<n            1<<2 左移2位   0001变成 0100,等于1*2*2,也就是4,  n<<2    比如4<<2,先转二进制,再计算 0100左移2位,就是4*2*2
    // >>    右移        1>>n            1>>2 右移2位   0100变成 0001,等于4/2/2


    public int hammingWeight(int n) {
        // java有个调库方法,不过这个题考算法的
        //return Integer.bitCount(n);
        int index = 0;
        for(int i=0;i<32;i++) {//二进制32位
            if ((n&(1<<i))!=0) {  //n依次和0001,0010,0100...比,由于11得1,即该位为1,太妙了
                index++;
            }
        }
        return index;
    }

    //位运算优化
    public int hammingWeight1(int n) {
        int index = 0;
        while(n!=0){
            n&=n-1;      //等同于n=n&(n-1)  4与3   0100与0011 返回0   6&(6-1)  0110&0101 返回0100 =4   这个运算中 0110到0100,每次都相当于把最低位的1变成了0(有点难以总结这个规律..)
            index++;
        }
        return index;
    }
}
