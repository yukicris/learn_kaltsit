package com.yukicris.Spring5;

public class sp7 {
    /**
     * aop
     */

    /**
     * 代理模式  tst7里面多看几遍
     *      好处: 使真实角色的操作更加纯粹,不用去关注公共的业务,
     *      公共也交给了代理角色,实现了业务的分工
     *      公共业务法神扩展的时候,方便集中管理
     *
     *
     *      缺点: 一个真实角色就会产生一个代理角色,代码量会翻倍,开发效率变低
     *
     *      代码步骤: 1 接口
     *              2 真实角色
     *              3 代理角色
     *              4 客户端访问
     *
     * 中介;
     *
     * springaop的底层,就是代理模式
     *      比如项目上线了,代码不好改了,但是突然需要增加一个日志功能,这个时候就可以加一个代理,完成这个日志的功能,这就是aop的实现
     *
     * 代理模式的分类
     *   1 静态代理   多看看tst的demo1和2
     *
     *      角色分析: 抽象角色: 一般会使用接口或者抽象类来解决
     *      真是角色: 被代理的角色
     *      代理角色: 代理真实角色,代理真实角色以后,会做一些附属操作
     *      客户: 访问代理对象的人
     *
     *
     *
     *   2 动态代理
     *       动态代理和静态代理角色一样
     *       动态代理的代理类是动态生成的,不是直接写好的
     *       动态代理也分为2大类: 1 基于接口的动态代理  2 基于类的动态代理
     *
     *          基于接口 : jdk动态代理
     *          基于类   : cdlib
     *          java字节码实现 : ja vassist
     *
     *
     *    需要了解2个类(记住)
     *      proxy 生成代理对象的   ,InvocationHandler 调用处理程序并返回结果
     *
     *
     *      动态代理的好处:
     *          使真实角色的操作更加纯粹,不用去关注公共的业务,
     *          公共也交给了代理角色,实现了业务的分工
     *          公共业务法神扩展的时候,方便集中管理
     *          一个动态代理类代理的是一个接口,一般对应一类业务
     *          一个动态代理类可以代理多个类,只要是实现了同一个接口即可
     *
     *
     *
     *
     */
}
