package com.yukicris.Spring5;

public class sp1 {

    /**
     * spring boot
     * > 一个快速开发的脚手架
     * > 基于springboot可以快速开发单个微服务
     * > 约定大于配置
     */

    /**
     * spring 基于springBoot实现
     * spring 是一个轻量级的控制反转面向切面编程的非入侵式编程
     */


    /**
     * IOC 理论推导
     * 代码参考  tst1包 部分
     *
     *
     * 1 UserDao 接口
     * 2 UserDaoImpl 实现类
     * 3 UserService 业务接口
     * 4 UserServiceImpl 业务实现类
     *
     *
     * 在之前业务中,用户的需求可能会影响原来的代码,需要根据用户的需求去更改原来的代码,如果程序代码量庞大,
     * 修改一次的成本代价十分昂贵
     *
     * 使用一个set接口来实现
     *
     * private UserDao userdao;
     * //public void setUserDao(userdao userDao) {
     *     this.userdao = userdao;
     * }
     *之前,程序主动创建对象,控制权在程序员手上,使用了set注入,程序不再具有主动性,而是变成了被动的接收对象
     *
     *
     * 这种思想,从本质上解决了问题,程序员不用再去管理对象的创建了,系统的耦合性大大降低,可以更专注在业务的实现了
     *
     *
     * IOC 的本质
     *      控制反转 是一种设计思想,DI(依赖注入) 是实现IOC的一种方法,没有IOC的程序中,我们使用面向对象编程,对象的创建和对象
     * 之间的依赖关系完全硬编码在程序之中,对象的创建由程序自己控制,控制反转后,将对象的创建转移给第三方,使获得依赖的对象
     * 方式反转
     *
     * IOC 是spring框架的核心内容,使用多种方式完美实现了IOC,可以使用xml配置,也可以使用注解,新版本的Spring也可以零配置实现IOC(自动装配)
     *
     * Spring 容器在初始化的时候,先读取配置文件,根据配置文件或元数据创建与组织对象存入容器之中,程序使用的时候再去从IOC容器中取出需要的
     * 对象
     *
     * !!! 控制反转 是一种通过描述(XML或注解) 并通过第三方去生产或者获取特定对象的方式,在Spring中实现控制反转的是IOC容器,其实现方法是依赖注入
     *
     *
     *
     *
     */

}
