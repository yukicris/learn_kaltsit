<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--对应上tst8讲aop的内容,方式1 ,使用原生的Spring api接口-->

    <bean id="userService" class="com.yukicris.Spring5.tst8.service.UserServiceImpl"/>
    <bean id="log" class="com.yukicris.Spring5.tst8.log.Log"/>
    <bean id="afterlog" class="com.yukicris.Spring5.tst8.log.AfterLog"/>

    <!--方式一; spring 的api-->
    <!--配置aop: 需要导入aop的约束-->
   <!-- <aop:config>
        &lt;!&ndash;切入点; expression:表达式;execution(要执行的位置 !(修饰词) *(返回值) *(类名) *(方法名) *(参数))&ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.yukicris.Spring5.tst8.service.UserServiceImpl.*(..))" />

        &lt;!&ndash;执行环绕增强&ndash;&gt;
        <aop:advisor advice-ref="log" pointcut-ref="pointcut" />
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut" />
    </aop:config>-->

    <!--方式二; 自定义类-->
  <!--  <bean id="diy" class="com.yukicris.Spring5.tst8.diy.DiyPointCut" />
    <aop:config>
        <aop:aspect ref="diy">
                &lt;!&ndash;切入点&ndash;&gt;
                <aop:pointcut id="point" expression="execution(* com.yukicris.Spring5.tst8.service.UserServiceImpl.*(..))" />
                &lt;!&ndash;通知&ndash;&gt;
                <aop:before method="before" pointcut-ref="point"/>
                <aop:after method="after" pointcut-ref="point" />
        </aop:aspect>
    </aop:config>-->

    <!--方式三,使用注解-->
    <bean id="annotationPointCut" class="com.yukicris.Spring5.tst8.diy.AnnotationPointCut" />
    <!--开启注解支持   JDK(默认 proxy-target-class="false")  cglib(proxy-target-class="false")-->
    <aop:aspectj-autoproxy />

</beans>
